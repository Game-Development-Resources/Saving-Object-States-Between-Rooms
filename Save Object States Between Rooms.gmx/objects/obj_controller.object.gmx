<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

creature_map = ds_map_create();


// Indexes for the 2d array
arr_obj = 0;
arr_x = 1;
arr_y = 2;
arr_paused = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Garbage collection

ds_map_destroy(creature_ap); // Free the ds map from memory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grab creature data

creatures_arr = 0; // Clear the variable we'll use for the 2d array
arr_index = 0;
with par_save_data {
    // Add data to creatures_array
    // All objects that get their data saved must have all of these variables or you'll get an error
    other.creatures_arr[other.arr_index, other.arr_obj] = object_index; // Save the type of object
    other.creatures_arr[other.arr_index, other.arr_x] = x; // Save the x value
    other.creatures_arr[other.arr_index, other.arr_y] = y; // Save the y value
    other.creatures_arr[other.arr_index, other.arr_paused] = paused; // Save the value of the variabled "paused"
    other.arr_index += 1;
    }

creature_map[? current_room] = creatures_arr; // Add the 2d array to the map using the room name as the key
creatures_arr = 0; // Free the array from memory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

current_room = room_get_name(room);

// This lets you initialize the room using the level editor,
// because it only loads in data once there is data in the ds_map.
// The first time there is data in the ds_map for a given room is
// when the room ends for the first time.
if ds_map_exists(creature_map, current_room) { // If there is any data for this room
    // Delete all of the objects that already exist in the room, since we have data
    with par_save_data {
        instance_destroy();
        }
    // Create new objects with the data we have
    creatures_arr = 0; // Clear the variable we'll use for the 2d array
    creatures_arr = creature_map[? current_room]; // Grab the 2d array out of the ds_map
    for (i=0; i&lt;array_height_2d(creatures_arr); i += 1) {
        var object_type = creatures_arr[i, arr_obj];
        var object_x = creatures_arr[i, arr_x];
        var object_y = creatures_arr[i, arr_y];
        var object_paused = creatures_arr[i, arr_paused];
        var inst;
        inst = instance_create(object_x, object_y, object_type); // Create the object
        inst.paused = object_paused; // Set the object's paused variable
        }
    ds_map_delete(creature_map, current_room); // Delete the data for this room to save a bit of memory
    creatures_arr = 0; // Free the array from memory
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_set_font(font0);
draw_text(10, 10, "Current room: "+string(current_room));
draw_text(10, 30, "Press Space to switch between rooms.");
draw_text(10, 50, "Press P to toggle the pause variable in the objects.");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cycle through the rooms

if room_next(room) == -1 { // If there is no next room
    room_goto(room_first);
    }
else { // If there is a next room
    room_goto_next();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
